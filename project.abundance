{
  "atomType": "Molecule",
  "name": "tap",
  "x": 0,
  "y": 0,
  "uniqueID": "159269a3-b6a9-4ee8-837e-1a5fa0274616",
  "ioValues": [],
  "topLevel": true,
  "allAtoms": [
    {
      "atomType": "Output",
      "name": "Output",
      "x": 0.98,
      "y": 0.5,
      "uniqueID": "b4fbfef5-0d84-405a-8f3c-a07842d9166c",
      "ioValues": []
    },
    {
      "atomType": "Code",
      "name": "Code",
      "x": 0.5535714285714286,
      "y": 0.3012422360248447,
      "uniqueID": "9a0d8f13-2df4-462b-8f65-74d0b9ccf9e5",
      "ioValues": [
        {
          "name": "pitch",
          "ioValue": 1.5,
          "currentEquation": "1.5"
        },
        {
          "name": "threadLength",
          "ioValue": 15,
          "currentEquation": "15"
        },
        {
          "name": "diameter",
          "ioValue": 10
        },
        {
          "name": "threadDepth",
          "ioValue": 0.9
        }
      ],
      "codeVersion": 1,
      "code": "// Threaded cylinder example for Replicad (JS Code Atom)\n//\n// Inputs:\n// - pitch: axial distance per turn (mm)\n// - threadLength: axial length of the threaded zone (mm)\n// - diameter: major diameter of the cylinder (mm)\n// - threadDepth: approximate thread depth (mm)\n// - external: true => external thread (added/fused), false => internal (subtracted/cut)\n\nconst Inputs = [\n  \n  { inputName: \"cyl\", type: \"geometry\", defaultValue: null },\n  { inputName: \"pitch\", type: \"number\", defaultValue: 1.5 },\n  { inputName: \"threadLength\", type: \"number\", defaultValue: 12 },\n  { inputName: \"diameter\", type: \"number\", defaultValue: 10 },\n  { inputName: \"threadDepth\", type: \"number\", defaultValue: 0.9 },\n  { inputName: \"external\", type: \"boolean\", defaultValue: true }\n]\n\n  // Derived values\n  const P = pitch;\n  const L = threadLength;\n  const D = diameter;\n  const depth = threadDepth;\n\n  // Helix radius:\n  // - For external threads place helix at the major radius (D/2)\n  // - For internal threads place helix inside the cylinder (D/2 - depth)\n  const helixRadius = external ? D / 2 : (D / 2 - depth);\n\n  // 1) Create base cylinder (centered on origin, height = L)\n  const cylinder = library[cyl]\n\n  // 2) Create helix sketch: pitch, height, radius\n  // sketchHelix returns a Sketch which exposes sweepSketch()\n  const helix = replicad.sketchHelix(P, L, helixRadius);\n\n  // 3) Profile callback: given (plane, origin) return a Sketch for the thread profile.\n  // Coordinates in the profile's local plane: X points outward from the helix,\n  // Y is lateral across the tooth base. We draw a simple triangular profile here.\n  const profileCallback = (plane, origin) => {\n    const baseWidth = P * 0.8; // adjust as needed\n    const halfBase = baseWidth / 2;\n\n    // The triangle is drawn so its inner edge sits at X=0 and the tip points toward +X\n    return replicad.draw()\n      .movePointerTo([0, -halfBase])\n      .lineTo([depth, 0])\n      .lineTo([0, halfBase])\n      .close()\n      .sketchOnPlane(plane, origin);\n  };\n\n  // 4) Sweep the profile along the helix to create the thread solid\n  const sweepConfig = {\n    frenet: true,\n    forceProfileSpineOthogonality: true\n  };\n\n  const threadSolid = helix.sweepSketch(profileCallback, sweepConfig);\n\n \n      const newPlane = new replicad.Plane().pivot(0, 'Y')\n   //Wrap the raw replicad geometry in our assembly format\n      let shape2 = {\n          geometry: [threadSolid],\n          dimension: \"3D\",\n          tags: [\"createdShape\"],\n          color: '#A3CE5B',\n          plane: newPlane,\n          bom: []\n      }\n\n  return shape2;\n\n\n     \n\n  \n\n      /**\n      Built-in Functions Available:\n      - Move(geometry, x, y, z) - Move a shape in 3D space\n      - Rotate(geometry, x, y, z) - Rotate a shape around X, Y, Z axes (degrees)\n      - Scale(geometry, factor) - Scale a shape by a factor\n      - Assembly([shapes]) - Combine multiple shapes into an assembly\n      - Intersect(shape1, shape2) - Boolean intersection of two shapes\n      - GetBounds(geometry) - Get the bounding box of a shape\n      - Fillet(geometry, radius) - Round edges with specified radius\n      - Chamfer(geometry, size) - Bevel edges with specified size\n\n      To Use the Code Atom, enter your inputs to the input list as an object array:\n      const Inputs = [\n        {inputName: \"shape\", type: \"geometry\", defaultValue: null},\n        {inputName: \"dist\", type: \"number\", defaultValue: 5},\n        {inputName: \"height\", type: \"number\", defaultValue: 10}\n      ]\n\n      Access imported geometry using library[inputName] - the built-in functions handle \n      the complexity of accessing geometry arrays and maintaining metadata automatically.\n\n      Simple Example - Move a shape:\n         const Inputs = [\n          {inputName: \"shape\", type: \"geometry\", defaultValue: null},\n          {inputName: \"x\", type: \"number\", defaultValue: 5}\n        ]\n        let movedShape = await Move(library[shape], x, 0, 0)\n        return movedShape\n      */\n      "
    },
    {
      "atomType": "Code",
      "name": "Code",
      "x": 0.2716165413533835,
      "y": 0.6708074534161491,
      "uniqueID": "4c512958-7902-4eef-b049-8e28f72aca67",
      "ioValues": [
        {
          "name": "dist",
          "ioValue": 5
        },
        {
          "name": "height",
          "ioValue": 10
        }
      ],
      "codeVersion": 1,
      "code": "\n      const Inputs = [\n       {inputName: \"shape\", type: \"geometry\", defaultValue: null},\n      {inputName: \"dist\", type: \"number\", defaultValue: 5},\n        {inputName: \"height\", type: \"number\", defaultValue: 10}\n      ]\n      //This defines the molecules inputs and creates variables with the same names which can be referenced in the code\n\n      //Gets the shape from the library - no need to clone or access geometry directly\n      let importedShape = library[shape]\n\n      //Use the built-in Move function to move the shape in the X direction\n      let movedShape = await Move(importedShape, dist, 0, 0)\n\n      //Use the built-in Rotate function to rotate the shape\n      let rotatedShape = await Rotate(importedShape, 0, 45, 0)\n\n      //Use the built-in Scale function to make the shape smaller\n      let scaledShape = await Scale(importedShape, 0.8)\n\n      //Console.log works for debugging to better see what is happening under the hood\n      console.log(\"Original shape bounds:\", GetBounds(importedShape))\n      console.log(\"Moved shape bounds:\", GetBounds(movedShape))\n\n      //Create a new shape from scratch using replicad\n      let createdRectangle = replicad.drawRectangle(5, 7)\n      const newPlane = new replicad.Plane().pivot(0, 'Y')\n      let createdShape = createdRectangle.sketchOnPlane(newPlane).extrude(height)\n\n      //Wrap the raw replicad geometry in our assembly format\n      let shape2 = {\n          geometry: [createdShape],\n          dimension: \"3D\",\n          tags: [\"createdShape\"],\n          color: '#A3CE5B',\n          plane: newPlane,\n          bom: []\n      }\n\n      //Use the built-in Fillet function to round the edges\n      let filletedShape = await Fillet(shape2, 0.5)\n\n      //Use the built-in Chamfer function to bevel the edges  \n      let chamferedShape = await Chamfer(movedShape, 0.3)\n\n      //Use the built-in Assembly function to combine multiple shapes\n      let finalAssembly = await Assembly([rotatedShape, scaledShape, filletedShape, chamferedShape])\n\n      //You can also create boolean operations using Intersect\n      //let intersection = await Intersect(movedShape, rotatedShape)\n\n      return finalAssembly\n\n      /**\n      Built-in Functions Available:\n      - Move(geometry, x, y, z) - Move a shape in 3D space\n      - Rotate(geometry, x, y, z) - Rotate a shape around X, Y, Z axes (degrees)\n      - Scale(geometry, factor) - Scale a shape by a factor\n      - Assembly([shapes]) - Combine multiple shapes into an assembly\n      - Intersect(shape1, shape2) - Boolean intersection of two shapes\n      - GetBounds(geometry) - Get the bounding box of a shape\n      - Fillet(geometry, radius) - Round edges with specified radius\n      - Chamfer(geometry, size) - Bevel edges with specified size\n\n      To Use the Code Atom, enter your inputs to the input list as an object array:\n      const Inputs = [\n        {inputName: \"shape\", type: \"geometry\", defaultValue: null},\n        {inputName: \"dist\", type: \"number\", defaultValue: 5},\n        {inputName: \"height\", type: \"number\", defaultValue: 10}\n      ]\n\n      Access imported geometry using library[inputName] - the built-in functions handle \n      the complexity of accessing geometry arrays and maintaining metadata automatically.\n\n      Simple Example - Move a shape:\n         const Inputs = [\n          {inputName: \"shape\", type: \"geometry\", defaultValue: null},\n          {inputName: \"x\", type: \"number\", defaultValue: 5}\n        ]\n        let movedShape = await Move(library[shape], x, 0, 0)\n        return movedShape\n      */\n      "
    },
    {
      "atomType": "Circle",
      "name": "Circle",
      "x": 0.17524916943521596,
      "y": 0.39751552795031053,
      "uniqueID": "bcfb7c9c-fed5-45e7-9f5f-b9ad2c5ca831",
      "ioValues": [
        {
          "name": "diameter",
          "ioValue": 10
        }
      ]
    },
    {
      "atomType": "Extrude",
      "name": "Extrude",
      "x": 0.31390977443609025,
      "y": 0.40372670807453415,
      "uniqueID": "045d5afb-40d8-4b6e-b499-a15c60a13b3e",
      "ioValues": [
        {
          "name": "height",
          "ioValue": 10
        }
      ]
    },
    {
      "atomType": "Fusion",
      "name": "Fusion",
      "x": 0.618421052631579,
      "y": 0.7701863354037267,
      "uniqueID": "68874950-39e7-43a9-ad03-fae672b47f23",
      "ioValues": [
        {
          "name": "Shape 1",
          "ioValue": {
            "geometry": "singular-46b1884167c4edd308bcf0c04163dd02d05c9742b35e86b57b5f7ed1b82f3850",
            "dimension": "3D",
            "tags": [
              "createdShape"
            ],
            "color": "#A3CE5B",
            "plane": {
              "origin": [
                0,
                0,
                0
              ],
              "xDir": [
                1,
                0,
                0
              ],
              "normal": [
                0,
                0,
                1
              ]
            },
            "bom": []
          }
        },
        {
          "name": "Shape 2",
          "ioValue": {
            "geometry": "extrude-a481ec58c9a7c784daf9749cbb35b147247c21436ae4673c2ae0b9ca95ecc7de",
            "dimension": "3D",
            "tags": [],
            "plane": {
              "origin": [
                0,
                0,
                0
              ],
              "xDir": [
                1,
                0,
                0
              ],
              "normal": [
                0,
                0,
                1
              ]
            },
            "color": "#aad7f2",
            "bom": []
          }
        }
      ],
      "unionType": "Fusion"
    },
    {
      "atomType": "Assembly",
      "name": "Assembly",
      "x": 0.7133458646616541,
      "y": 0.5248447204968945,
      "uniqueID": "337dd859-d479-416f-b534-9fca9e430244",
      "ioValues": [
        {
          "name": "Shape 1",
          "ioValue": {
            "geometry": "extrude-a481ec58c9a7c784daf9749cbb35b147247c21436ae4673c2ae0b9ca95ecc7de",
            "dimension": "3D",
            "tags": [],
            "plane": {
              "origin": [
                0,
                0,
                0
              ],
              "xDir": [
                1,
                0,
                0
              ],
              "normal": [
                0,
                0,
                1
              ]
            },
            "color": "#aad7f2",
            "bom": []
          }
        },
        {
          "name": "Shape 3",
          "ioValue": {
            "geometry": "singular-46b1884167c4edd308bcf0c04163dd02d05c9742b35e86b57b5f7ed1b82f3850",
            "dimension": "3D",
            "tags": [
              "createdShape"
            ],
            "color": "#A3CE5B",
            "plane": {
              "origin": [
                0,
                0,
                0
              ],
              "xDir": [
                1,
                0,
                0
              ],
              "normal": [
                0,
                0,
                1
              ]
            },
            "bom": []
          }
        }
      ]
    }
  ],
  "allConnectors": [
    {
      "ap1Name": "output",
      "ap2Name": "Shape 1",
      "ap1ID": "9a0d8f13-2df4-462b-8f65-74d0b9ccf9e5",
      "ap2ID": "68874950-39e7-43a9-ad03-fae672b47f23"
    },
    {
      "ap1Name": "output",
      "ap2Name": "Shape 3",
      "ap1ID": "9a0d8f13-2df4-462b-8f65-74d0b9ccf9e5",
      "ap2ID": "337dd859-d479-416f-b534-9fca9e430244"
    },
    {
      "ap1Name": "geometry",
      "ap2Name": "geometry",
      "ap1ID": "bcfb7c9c-fed5-45e7-9f5f-b9ad2c5ca831",
      "ap2ID": "045d5afb-40d8-4b6e-b499-a15c60a13b3e"
    },
    {
      "ap1Name": "geometry",
      "ap2Name": "cyl",
      "ap1ID": "045d5afb-40d8-4b6e-b499-a15c60a13b3e",
      "ap2ID": "9a0d8f13-2df4-462b-8f65-74d0b9ccf9e5"
    },
    {
      "ap1Name": "geometry",
      "ap2Name": "Shape 2",
      "ap1ID": "045d5afb-40d8-4b6e-b499-a15c60a13b3e",
      "ap2ID": "68874950-39e7-43a9-ad03-fae672b47f23"
    },
    {
      "ap1Name": "geometry",
      "ap2Name": "Shape 1",
      "ap1ID": "045d5afb-40d8-4b6e-b499-a15c60a13b3e",
      "ap2ID": "337dd859-d479-416f-b534-9fca9e430244"
    }
  ],
  "unitsKey": "MM",
  "fileTypeVersion": 1,
  "compiledBom": {},
  "filetypeVersion": 1
}